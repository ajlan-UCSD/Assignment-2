{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "Sx6PRUZUHxrB"
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%microblaze/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%pybind11/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Marx slept for 2 seconds and is now hungry.\n",
      "Marx starts eating for 7 seconds\n",
      "Kant slept for 3 seconds and is now hungry.Buddha slept for 3 seconds and is now hungry.\n",
      "Buddha swaps forks\n",
      "\n",
      "Kant starts eating for 7 seconds\n",
      "Russel slept for 4 seconds and is now hungry.Aristotle slept for 4 seconds and is now hungry.\n",
      "Aristotle swaps forks\n",
      "\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha swaps forksRussel starts eating for 6 seconds\n",
      "\n",
      "Kant finishes eating and leaves to think.\n",
      "Aristotle swaps forksBuddha starts eating for 5 seconds\n",
      "\n",
      "Marx slept for 2 seconds and is now hungry.\n",
      "Kant slept for 2 seconds and is now hungry.\n",
      "Kant swaps forks\n",
      "Buddha finishes eating and leaves to think.\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle starts eating for 6 secondsMarx starts eating for 5 seconds\n",
      "Kant swaps forks\n",
      "\n",
      "Buddha slept for 2 seconds and is now hungry.\n",
      "Buddha swaps forks\n",
      "Russel slept for 2 seconds and is now hungry.\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha starts eating for 6 secondsRussel swaps forks\n",
      "\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Russel starts eating for 5 secondsKant swaps forks\n",
      "\n",
      "Marx slept for 3 seconds and is now hungry.\n",
      "Aristotle slept for 3 seconds and is now hungry.\n",
      "Buddha finishes eating and leaves to think.Russel finishes eating and leaves to think.\n",
      "\n",
      "Kant starts eating for 5 secondsMarx starts eating for 7 seconds\n",
      "\n",
      "Aristotle swaps forks\n",
      "Buddha slept for 2 seconds and is now hungry.\n",
      "Russel slept for 4 seconds and is now hungry.\n",
      "Kant finishes eating and leaves to think.\n",
      "Buddha swaps forksAristotle starts eating for 6 seconds\n",
      "\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha starts eating for 7 secondsRussel swaps forks\n",
      "\n",
      "Kant slept for 3 seconds and is now hungry.\n",
      "Marx slept for 3 seconds and is now hungry.\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Kant swaps forksRussel starts eating for 7 seconds\n",
      "\n",
      "Aristotle slept for 2 seconds and is now hungry.\n",
      "Buddha finishes eating and leaves to think.\n",
      "Marx swaps forksKant starts eating for 5 seconds\n",
      "\n",
      "Buddha slept for 2 seconds and is now hungry.\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle swaps forksMarx starts eating for 6 seconds\n",
      "\n",
      "Kant finishes eating and leaves to think.\n",
      "Buddha swaps forksAristotle starts eating for 7 seconds\n",
      "\n",
      "Russel slept for 3 seconds and is now hungry.\n",
      "Kant slept for 4 seconds and is now hungry.\n",
      "Marx finishes eating and leaves to think.\n",
      "Russel swaps forksBuddha starts eating for 6 seconds\n",
      "\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Kant swaps forksRussel starts eating for 5 seconds\n",
      "\n",
      "Marx slept for 3 seconds and is now hungry.\n",
      "Aristotle slept for 4 seconds and is now hungry.\n",
      "Buddha finishes eating and leaves to think.\n",
      "Kant starts eating for 6 secondsMarx swaps forks\n",
      "\n",
      "Russel finishes eating and leaves to think.\n",
      "Kant finishes eating and leaves to think.\n"
     ]
    }
   ],
   "source": [
    "import threading\n",
    "import time\n",
    "import random\n",
    "from pynq.overlays.base import BaseOverlay\n",
    "\n",
    "class Philosopher(threading.Thread):\n",
    "    def __init__(self, name, led, fork_on_left, fork_on_right, stop_event):\n",
    "        threading.Thread.__init__(self)\n",
    "        self.name = name\n",
    "        self.led = led\n",
    "        self.fork_on_left = fork_on_left\n",
    "        self.fork_on_right = fork_on_right\n",
    "        self.stop_event = stop_event\n",
    "\n",
    "    def run(self):\n",
    "        while not self.stop_event.is_set():\n",
    "            # Philosopher is thinking (but really just sleeping).\n",
    "            sleep_time = random.randint(2, 4)  # Napping time\n",
    "            time.sleep(sleep_time)\n",
    "            print(f'{self.name} slept for {sleep_time} seconds and is now hungry.')\n",
    "            self.dine()\n",
    "\n",
    "    def dine(self):\n",
    "        fork1, fork2 = self.fork_on_left, self.fork_on_right\n",
    "\n",
    "        while True and not self.stop_event.is_set():\n",
    "            fork1.acquire(True)\n",
    "            locked = fork2.acquire(False)\n",
    "            if locked: break\n",
    "            fork1.release()\n",
    "            print(f'{self.name} swaps forks')\n",
    "            fork1, fork2 = fork2, fork1\n",
    "        else:\n",
    "            return\n",
    "\n",
    "        self.dining()\n",
    "        fork2.release()\n",
    "        fork1.release()\n",
    "\n",
    "    def dining(self):\t\n",
    "        eat_time = random.randint(5, 7)  # Eating time\n",
    "        print(f'{self.name} starts eating for {eat_time} seconds')\n",
    "        self.led.on()  # Turn on LED\n",
    "        time.sleep(eat_time)\n",
    "        print(f'{self.name} finishes eating and leaves to think.')\n",
    "        self.led.off()  # Turn off LED\n",
    "\n",
    "def main():\n",
    "    base = BaseOverlay(\"base.bit\")\n",
    "    leds = [base.leds[index] for index in range(4)]\n",
    "    forks = [threading.Lock() for n in range(5)]\n",
    "    philosopher_names = ('Aristotle','Kant','Buddha','Marx', 'Russel')\n",
    "    stop_event = threading.Event()\n",
    "\n",
    "    philosophers= [Philosopher(philosopher_names[i], leds[i%4], forks[i%5], forks[(i+1)%5], stop_event) \\\n",
    "            for i in range(5)]\n",
    "\n",
    "    for p in philosophers: p.start()\n",
    "\n",
    "    while not base.buttons[0].read():\n",
    "        time.sleep(0.1)\n",
    "\n",
    "    stop_event.set()\n",
    "\n",
    "    for p in philosophers: p.join()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
