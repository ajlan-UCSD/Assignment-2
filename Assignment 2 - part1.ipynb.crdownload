{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "qsf7NJxOHGDW",
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kant is hungry.\n",
      "Kant starts eating \n",
      "Aristotle is hungry.Russel is hungry.\n",
      "Russel starts eating \n",
      "\n",
      "Buddha is hungry.Marx is hungry.\n",
      "Marx swaps forks\n",
      "\n",
      "Kant finishes eating and leaves to think.\n",
      "Buddha starts eating \n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle starts eating \n",
      "Marx swaps forks\n",
      "Kant is hungry.\n",
      "Russel is hungry.\n",
      "Russel swaps forks\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Russel starts eating Kant swaps forks\n",
      "\n",
      "Buddha finishes eating and leaves to think.\n",
      "Kant starts eating Marx swaps forks\n",
      "\n",
      "Buddha is hungry.Aristotle is hungry.\n",
      "\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle swaps forksMarx starts eating \n",
      "\n",
      "Kant finishes eating and leaves to think.\n",
      "Buddha swaps forksAristotle starts eating \n",
      "\n",
      "Russel is hungry.Kant is hungry.\n",
      "\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha starts eating \n",
      "Russel swaps forks\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Kant swaps forksRussel starts eating \n",
      "\n",
      "Marx is hungry.Aristotle is hungry.\n",
      "\n",
      "Russel finishes eating and leaves to think.Buddha finishes eating and leaves to think.\n",
      "\n",
      "Aristotle starts eating \n",
      "Kant swaps forksMarx starts eating \n",
      "\n",
      "Buddha is hungry.\n",
      "Buddha swaps forks\n",
      "Russel is hungry.\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Kant starts eating \n",
      "Marx finishes eating and leaves to think.Aristotle is hungry.\n",
      "\n",
      "Aristotle swaps forks\n",
      "Buddha swaps forksRussel starts eating \n",
      "\n",
      "Marx is hungry.\n",
      "Marx swaps forks\n",
      "Kant finishes eating and leaves to think.\n",
      "Aristotle swaps forksBuddha starts eating \n",
      "\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle starts eating \n",
      "Marx swaps forks\n",
      "Kant is hungry.\n",
      "Russel is hungry.\n",
      "Russel swaps forks\n",
      "Buddha finishes eating and leaves to think.\n",
      "Marx starts eating \n",
      "Buddha is hungry.\n",
      "Buddha swaps forks\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Russel swaps forksKant starts eating \n",
      "\n",
      "Aristotle is hungry.\n",
      "Aristotle swaps forks\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha swaps forksRussel starts eating \n",
      "\n",
      "Kant finishes eating and leaves to think.\n",
      "Aristotle swaps forksBuddha starts eating \n",
      "\n",
      "Marx is hungry.\n",
      "Kant is hungry.\n",
      "Kant swaps forks\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle starts eating \n",
      "Buddha finishes eating and leaves to think.\n",
      "Kant swaps forksMarx starts eating \n",
      "\n",
      "Russel is hungry.\n",
      "Buddha is hungry.\n",
      "Buddha swaps forks\n",
      "Marx finishes eating and leaves to think.\n",
      "Buddha starts eating Russel swaps forks\n",
      "\n",
      "Aristotle finishes eating and leaves to think.\n",
      "Russel starts eating Kant swaps forks\n",
      "\n",
      "Marx is hungry.\n",
      "Aristotle is hungry.\n",
      "Buddha finishes eating and leaves to think.\n",
      "Marx swaps forksKant starts eating \n",
      "\n",
      "Russel finishes eating and leaves to think.\n",
      "Aristotle swaps forksMarx starts eating \n",
      "\n",
      "Russel is hungry.\n",
      "Buddha is hungry.\n",
      "Marx finishes eating and leaves to think.\n",
      "Kant finishes eating and leaves to think.\n",
      "Aristotle starts eating \n",
      "Aristotle finishes eating and leaves to think.\n"
     ]
    }
   ],
   "source": [
    "import threading\n",
    "import time\n",
    "import random\n",
    "from pynq.overlays.base import BaseOverlay\n",
    "\n",
    "class Philosopher(threading.Thread):\n",
    "    def __init__(self, name, led, fork_on_left, fork_on_right, stop_event):\n",
    "        threading.Thread.__init__(self)\n",
    "        self.name = name\n",
    "        self.led = led\n",
    "        self.fork_on_left = fork_on_left\n",
    "        self.fork_on_right = fork_on_right\n",
    "        self.stop_event = stop_event\n",
    "\n",
    "    def run(self):\n",
    "        while not self.stop_event.is_set():\n",
    "            # Philosopher is thinking (but really just sleeping).\n",
    "            time.sleep(random.randint(2, 4))  # Napping time\n",
    "            print(f'{self.name} is hungry.')\n",
    "            self.dine()\n",
    "\n",
    "    def dine(self):\n",
    "        fork1, fork2 = self.fork_on_left, self.fork_on_right\n",
    "\n",
    "        while True and not self.stop_event.is_set():\n",
    "            fork1.acquire(True)\n",
    "            locked = fork2.acquire(False)\n",
    "            if locked: break\n",
    "            fork1.release()\n",
    "            print(f'{self.name} swaps forks')\n",
    "            fork1, fork2 = fork2, fork1\n",
    "        else:\n",
    "            return\n",
    "\n",
    "        self.dining()\n",
    "        fork2.release()\n",
    "        fork1.release()\n",
    "\n",
    "    def dining(self):\t\n",
    "        print(f'{self.name} starts eating ')\n",
    "        self.led.on()  # Turn on LED\n",
    "        time.sleep(random.randint(5, 7))  # Eating time\n",
    "        print(f'{self.name} finishes eating and leaves to think.')\n",
    "        self.led.off()  # Turn off LED\n",
    "\n",
    "def main():\n",
    "    base = BaseOverlay(\"base.bit\")\n",
    "    leds = [base.leds[index] for index in range(4)]\n",
    "    forks = [threading.Lock() for n in range(5)]\n",
    "    philosopher_names = ('Aristotle','Kant','Buddha','Marx', 'Russel')\n",
    "    stop_event = threading.Event()\n",
    "\n",
    "    philosophers= [Philosopher(philosopher_names[i], leds[i%4], forks[i%5], forks[(i+1)%5], stop_event) \\\n",
    "            for i in range(5)]\n",
    "\n",
    "    for p in philosophers: p.start()\n",
    "\n",
    "    while not base.buttons[0].read():\n",
    "        time.sleep(0.1)\n",
    "\n",
    "    stop_event.set()\n",
    "\n",
    "    for p in philosophers: p.join()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
